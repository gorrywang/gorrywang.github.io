<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ViewPager底部圆点指示器]]></title>
    <url>%2Fandroid01-viewpager.html</url>
    <content type="text"><![CDATA[在APP的ViewPager引导页面中, 我们通常可以看到底部有小圆点显示当前是第几页, 我们来试一下这个效果是怎么实现的, 效果图如下:代码是最为耐心、最能忍耐和最令人愉快的伙伴，在任何艰难困苦的时刻，它都不会抛弃你。 基础配置创建适配器控件在布局中.添加 viewpager控件, 并在MainActivity中 绑定控件. 布局中: 123456789101112131415161718192021 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.example.dell.lunbo.MainActivity&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/main_viewpager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;LinearLayout android:id=&quot;@+id/main_linear&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;50dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:gravity=&quot;center&quot; android:orientation=&quot;horizontal&quot; /&gt;&lt;/RelativeLayout&gt; MainActivity中: 12345678910111213141516171819202122232425262728293031import android.os.Bundle;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.widget.LinearLayout;import static com.example.dell.lunbo.R.id.main_linear;public class MainActivity extends AppCompatActivity &#123; private ViewPager mViewPager; private LinearLayout mLinearLayout; //ImageView动态数组 private List&lt;ImageView&gt; mImageList = new ArrayList&lt;ImageView&gt;(); @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); bindID(); &#125; /** * 绑定ID */ private void bindID() &#123; mViewPager = (ViewPager) findViewById(R.id.main_viewpager); mLinearLayout = (LinearLayout) findViewById(main_linear); &#125;&#125; 创建适配器 在MainActivity中,创建一个内部适配器类: 123456789101112131415161718192021222324252627282930313233/** * 适配器 */private class MyAdapter extends PagerAdapter &#123; //大小 @Override public int getCount() &#123; return mImageList.size(); &#125; @Override public boolean isViewFromObject(View view, Object object) &#123; return view == object; &#125; @Override public Object instantiateItem(ViewGroup container, int position) &#123; //获取图片view ImageView imageView = mImageList.get(position); //设置到容器,也就是ViewPager container.addView(imageView); //返回控件 return imageView; &#125; @Override public void destroyItem(ViewGroup container, int position, Object object) &#123; //从容器中删除 container.removeView(mImageList.get(position)); &#125;&#125; 添加数据在图片资源资源文件夹下面放入三张图片, 然后将每个图片给ImageView设置为背景并添加到动态数组中 添加图片数组 123//图片数组private int[] mPics = new int[]&#123;R.drawable.guide1, R.drawable.guide2, R.drawable.guide3&#125;; 创建getData()方法, 生成ImageView设置背景图片并放入ImageView数组中, 在onCreate()中调用. 123456789101112131415/** * 获取数据 */private void getData() &#123; //设置图片 ImageView imageView; View view; for (int pic : mPics) &#123; imageView = new ImageView(MainActivity.this); imageView.setBackgroundResource(pic); //添加到数组 mImageList.add(imageView); &#125;&#125; 创建适配器对象, 设置适配器 创建initAdaper()方法在onCreate()中调用给ViewPager设置适配器.1234567/** * 设置适配器 */private void initAdapter() &#123; mAdapter = new MyAdapter(); mViewPager.setAdapter(mAdapter);&#125; 重点教程(小圆点)在drawable文件夹下创建xml图形 在xml文件夹下创建一个enable.xml文件(选中时白色的小圆点文件)123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt; &lt;!--白色--&gt; &lt;solid android:color=&quot;#ffffff&quot; /&gt; &lt;!--半径--&gt; &lt;corners android:radius=&quot;10dp&quot; /&gt;&lt;/shape&gt; 在drawable文件夹下创建一个disable.xml文件(未选中是灰色的小圆点) 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt; &lt;!--灰色--&gt; &lt;solid android:color=&quot;@android:color/darker_gray&quot; /&gt; &lt;!--半径--&gt; &lt;corners android:radius=&quot;10dp&quot; /&gt;&lt;/shape&gt; 在drawable文件夹下创建一个background.xml文件(将前两种圆点背景合成一个文件) 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@drawable/enable&quot; android:state_enabled=&quot;true&quot; /&gt; &lt;item android:drawable=&quot;@drawable/disable&quot; android:state_enabled=&quot;false&quot; /&gt;&lt;/selector&gt; 生成小圆点 修改getData()方法, 有多少个图片资源,就生成多少个小圆点,设置到LinearLayout中.123456789101112131415161718192021222324252627/** * 获取数据 */private void getData() &#123; //设置图片 ImageView imageView; View view; for (int pic : mPics) &#123; imageView = new ImageView(MainActivity.this); imageView.setBackgroundResource(pic); //添加到数组 mImageList.add(imageView); //创建底部指示器(小圆点) view = new View(MainActivity.this); view.setBackgroundResource(R.drawable.background); view.setEnabled(false); //设置宽高 LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(30, 30); //设置间隔 if (pic != mPics[0]) &#123; layoutParams.leftMargin = 10; &#125; //添加到LinearLayout mLinearLayout.addView(view, layoutParams); &#125;&#125; 监听滑动 进入页面后, 第一个小圆点高亮,在onCreate()中写入一下代码:12//第一次显示小白点mLinearLayout.getChildAt(0).setEnabled(true); 使用监听滑动 , 滑到一个页面就将哪个小圆点高亮显示 1). 将 MainActivity implements ViewPager.OnPageChangeListener, 并重写三个方法 2). 给ViewPager注册监听 123//注册mViewPager.addOnPageChangeListener(this); 在重写的三个方法中, 如下写入: 12345678910111213141516@Overridepublic void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;&#125;@Overridepublic void onPageSelected(int position) &#123; mLinearLayout.getChildAt(mNum).setEnabled(false); mLinearLayout.getChildAt(position).setEnabled(true); mNum = position;&#125;@Overridepublic void onPageScrollStateChanged(int state) &#123;&#125; 好了,运行一下发下完美无误了.下载附件]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android studio 2.3.1 优化]]></title>
    <url>%2Fandroidstudio01.html</url>
    <content type="text"><![CDATA[今天重装系统, 正好将android studio优化过程记录下来.电脑内存: 8g电脑硬盘: SSD编程中我们会遇到多少挫折？表放弃，沙漠尽头必是绿洲。 android studio已经更新到了2.3.1, 正好借助这次重装系统将自己的优化过程记录下来. 不会翻墙的程序猿不是好程序猿首先,我们应该将电脑fq, 大多数的android studio的安装错误问题就不会出现. 扩大android studio 的内存打开android studio的安装目录, 进入bin目录下: 64位系统: 记事本打开 studio64.exe.vmoptions 文件. 32位系统: 记事本打开 studio.exe.vmoptions 文件. 修改如下参数: -Xms1024m -Xmx2048m -XX:ReservedCodeCacheSize=800m gradle进程守护 打开电脑目录 C:\Users\username\.gradle\ 在目录中新建一个 txt 文件, 名称为 gradle.properties ,然后将 后缀 txt 删除掉. 使用记事本打开 gradle.properties 文件. 将如下内容复制到记事本并保存: org.gradle.daemon=true org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=800m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 org.gradle.parallel=true org.gradle.configureondemand=true 设置android studio 打开 android studio 点击右上角 file → Settings → Build,Execution,Deloyment → Compiler. 勾选如下内容并保存: 切换到 Build,Execution,Deloyment → Gradle,勾选如下内容并保存: 这样,就设置完成了,在我的8g内存电脑上运行是比较流畅的.]]></content>
      <tags>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages 绑定域名]]></title>
    <url>%2Fpages02.html</url>
    <content type="text"><![CDATA[使用 Github Pages 搭建个人博客是一个很好的选择，但是 github 上默认的域名就是 用户名.github.io ，感觉让别人记忆起来有些困难，所以我们可以将自己购买的域名绑定到Github上。 长大后才真正明白，这个世界，评判你的标准，只有结果。 购买域名首先我们需要去购买一个域名，我们可以去各大域名商去买，比如：阿里云、腾讯云、GoDaddy 等，我个人是在阿里云上购买的，个人建议买国内供应商的。 购买就不再赘述。 域名解析打开域名解析面板，添加两条A记录： 记录值分别为 192.30.252.154 和 192.30.252.153，如图： 添加一条CNAME记录：记录值为 用户名.github.io.，如图： 绑定域名如果使用的是 Hexo 来生成的静态页面的话，我们需要在 Hexo 的 source 文件夹下创建 CNAME 的txt文档 ，然后将.txt 扩展名删除掉 ； 然后使用记事本打开 CNAME ，里面输入 你的网址，去掉 www，进行保存，如图： 生成网页，推送到服务器做好以上内容，我们就可以在git上使用 hexo g 和 hexo d 推送到服务器。 推送上去后，在Github仓库中的根目录下存在 CNAME 文件。 输入域名查看博客好了，在浏览器输入域名进行查看当前网页吧~]]></content>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github Pages 搭建个人博客]]></title>
    <url>%2Fpages01.html</url>
    <content type="text"><![CDATA[自己终于忍受不了又笨又慢服务器搭建个人博客了（学生党用不起高端服务器），经过几天的研究，自己通过Github搭建起了个人博客。 下面将自己搭建Github Pager的步骤慢慢叙来。 做任何事，只要你迈出了第一步，然后再一步步地走下去，你就会逐渐靠近你的目的地。 准备过程 首先，我们需要在电脑上安装两款软件，Node.js和Git。 Node.js下载地址: https://nodejs.org/en/ Git下载地址: https://git-scm.com/ 然后我们需要将Git通过SSH跟我们的GitHub账号关联起来，如果还不知道怎么操作可以参考以下两篇文章： Git的简单使用(1) Git的简单使用(2) 在GitHub上创建一个仓库,仓库名是 你的github账号名.github.io ,然后点击创建，就完成了，如下图。 开始搭建首先，我们需要先新建一个文件夹，起名叫 Hexo ,然后在文件夹内右击,选择Git Bash Here,弹出命令行. 安装Hexo 在git中输入 $ npm install -g hexo 速度有点慢，耐心等待会，下载完成如图所示： 初始化Hexo 在git中输入 $ hexo init 初始化过程有时候快有时候慢，因为它会自动在Github上克隆一套主题,耐心等待，初始化完成后如图所示： 生成静态网页以及本地运行 第一个命令，生成静态网页 $ hexo g 第二个命令，本地调试运行 $ hexo s 这两个命令输入完毕后，在浏览器中输入 localhost:4000 就可以查看已经搭建成功了 ,如果报错的话可以使用 hexo clean命令将生成的静态网页清理掉，然后再次重新生成。 基本配置当我们初始化完成以后，我们就可以对我们的网页进行基本的配置了。 使用记事本打开目录下的 _config.yml文件,如图： 根据下图进行配置： 克隆主题因为自带的主题不太好看，所以我们可以克隆主题，有几个比较好看的主题如下： Next ，也就是本博客所使用的主题 github地址: https://github.com/iissnan/hexo-theme-next 使用文档： http://theme-next.iissnan.com/ material , 非常漂亮的主题 github项目地址：https://github.com/viosey/hexo-theme-material 使用文档：https://material.viosey.com/start/ 根据官方的文档，我们就可使用简约大方的主题了。 生成静态网页，并推送的Github当我们感觉自己的主题已经配置好了，我们可以将它生成并同步到Github上面. 填写自己的Github仓库地址 使用记事本打开目录下的 _config.yml文件,如图： 修改文件以下内容 deploy: type: git repo: github: git@github.com:github中的用户名/github中的用户名.github.io.git,master 打开git,输入hexo g就生成界面了，然后输入 hexo d ，就可以将网页推送到github上了，这时候我们可以通过 github中的用户名.github.io来访问自己网站了。 注意事项因为我们在修改配置的时候会写错，所以我们在修改的时候注意及时备份。 到此，我们的网页就搭建成功了，赶快开始你的博客之旅吧~]]></content>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git的简单使用(2)]]></title>
    <url>%2Fgit02.html</url>
    <content type="text"><![CDATA[任务：使用远程仓库 目标：能够掌握生成ssh密钥以及同步远程仓库 每一年每一天我们都在进步 首先我们需要在Github上注册账号，不在赘述。 进阶部分SSH是一种网络协议，用于计算机之间的加密登录。目前 是每一台Linux电脑的标配。而大多数Git服务器都会选择使用SSH公钥来进行授权，所以想要在GitHub提交代码的第一步就是要先添加SSH key配置。 添加SSH key第一步:检查是否存在SSH​ 首先检查我们的机器中是否安装了SSH，Linux合Mac自带SSH，然Win系统只要装了Git就有SSH，我们可以 在Git Bash 中输入ssh检查一下是否安装了SSH,出下下图就代表已经存在了。 第二步:生成SSH密钥​ 打开我们的 Git Bash , 输入ssh-keygen -t rsa ,连续按下三个回车就会生成密钥。 ​ 会生成两个文件id_rsa和id_rsa.pub: ​ Linux/Mac系统在 ~/.ssh下 ​ win系统在 /c/User/username/.ssh下 ​ 我们用记事本打开id_rsa.pub文件，将里面的内容复制到剪贴板。 第三步:GitHub上添加SSH key​ 登陆我们的Github账号，进入设置项。 ​ 然后在左侧栏点击SSH and GPG keys ,然后点击右上角New SSH key ,就会可以添加公钥。 ​ 将剪贴板里的内容添加到key里面，然后保存就添加上了。 第四步:检查是否添加成功SSHkey​ 在Git bash 中输入ssh -T git@github.com, ,出现提示输入yes回车，就可以看到下图所示。 ​ 这就代表我们已经添加成功了。 Push&amp;Pull在推送Github到之前，先理解两个概念。 Push：就是“推”的意思，如果你本地代码有更新了，那么就需要把本地代码推到远程仓库，这样本地仓库跟远程仓库就可以保持同步了。示例：git push origin master意思就是把本地代码推到远程master分支。 Pull：就是“拉”的意思，如果别人提交代码到远程仓库，这个时候你需要把远程仓库的最新代码拉下来，然后保证两端代码的同步。示例：git pull origin master意思就是把远程最新的代码更新到本地。 克隆远程仓库到本地,通过SSH首先我们先打开一个Github的仓库，在仓库里面就可以看到SSH，如下图： 然后我们可以将这个仓库克隆下来，在Git Bash中输入git clone 加上链接 重点将本地项目推送到github远程仓库上去 推送方式1：在克隆到本地项目的进行推送到远程仓库中这种推送方式最为简单，因为项目是克隆下来的，已经关联到了远程的仓库，所以，我们只需要推送就可以了。 首先克隆一个自己的仓库到本地，请参考上面。 然后我们修改一下已经克隆下来的文件，然后推送上去 第一步：例如先在仓库中添加一个aa.md的文件，然后git add aa.md,git comit -m&apos;test&apos; 第二步：输入git push origin master 就推送到远程仓库中了。 推送方式2：新建远程仓库，将本地项目推送到新建仓库中这种方式，需要我们在github上创建一个空仓库，然后我们可以把本地仓库推送上去。 ##### 第一步：在GitHub上建一个test2仓库 ​ ##### 第二步：将项目关联到test2仓库 ​ 先将，本地目录初始化成仓库 ​ ​ 然后添加文件，不在赘述 ​ ​ 关联本地仓库和远程仓库，git remote add 仓库名（随意） github仓库地址 ​ ​ 推送到远程仓库，git push 仓库名（也就是连接的名） 哪个分支。 ​ ​ 这样就推送上去了。 ​ ​ 经常操作几遍，就可以熟练运用。]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git的简单使用(1)]]></title>
    <url>%2Fgit01.html</url>
    <content type="text"><![CDATA[任务：学习Git的基本使用方法 目标：能够掌握init、status、log、commit、branch、checkout 时光逼着人以微笑付之所有伤 下载并安装Git： 进入Git官网下载，根据自己的系统版本进行下载。 我的是Windows x64系统，所以选择64位系统。 下载完成点击安装。 点击Next 勾选 Git Bash Here ,然后点击 Next 有三个选项，这里我们选择 第二个 ,然后 Next 有三个选项，这里我们选择 第一个 ,然后 Next 默认选项，Next，进行安装。 掌握init、status、log、commit 首先，我们新建一个文件夹，在文件夹里右击，选择 Git Bash Here ,就会弹出命令行输入框。 然后我们在这里输入 git status ,回车，观察会发现错误，错误的原因是当前文件夹并不是一个仓库，所以我们需要先 初始化仓库 git init , 然后就会发现文件夹内多了一个文件夹.git。 初始化完仓库后，我们就可以进行操作了。 在文件夹里创建一个文件 my.md , 然后在命令行里输入 git status ,会发现下面情况。 这是因为我们没有把my.md这个文件上传到暂存盘，所以我们可以使用 git add my.md 这个命令将my.md上传到暂存盘（注意：是暂存盘，并没有提交），然后调用 git status 命令查看 现在我们已经将文件添加到暂存盘了，然后我们可以提交进行保存了，调用命令git commit -m&#39;保存信息&#39; ,就可以保存了。 提交过多少次，我们可以通过 git log 进行查看 掌握branch、checkout branch 也就是分支，分支的概念很重要，尤其是在公司团队协作的时候，假设几个人都在做同一个项目，这个时候分支就可以派上用场了。举个例子，小张、小明俩人在做同一个项目，但是他们分工不同，所以小张建立了一个分支叫做a，小明建立了一个分支叫做b，当他们都完成各自的分工后，就可以将完成的分支代码合并到master上。 刚才我们的操作都是在master上，输入 git branch , 可以查看当前有多少分支 通过截图我们看到当前就一个master，所以我们可以建立一个分支a,输入命令 git branch a , 就可以创建出新的分支，这个分支是与master的数据一样的，然后查看分支 通过截图我们可以发现当前有两个，一个是master ， 一个是 a 。 我们切换分支可以输入 git checkout a , 就可以切换到a分支。 现在我们再从文件夹内创建一个文件 a.md ,然后add 并 commit 。 输入git checkout master ,切换回master分支,然后观察文件夹，发现只有my.md文件。原因是a.md文件在 a 分支上，这时候我们需要将 a 分支合并到 master 分支上，输入命令 git merge a 现在，我们查看文件夹，发现里面就出现了a.md文件。 已经将 a分支 合并到了 master ,所以我们可以删除 a 分支 ，输入 git branch -d a 就可以将 a 分支删除 ，如果分支删除失败，可以使用强制删除，输入 git branch -D a就可以强制删除 。 到此，一些基本内容我们就讲完了，大家熟悉练习 ，先将基础内容搞懂 , 下面学起来就简单了。]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>